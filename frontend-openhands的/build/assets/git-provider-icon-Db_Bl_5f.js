import{A as b,o as r,u as f}from"./open-hands-axios-BIuoB8bl.js";import{u as w}from"./brand-button-BQs8JWFf.js";import{D as S}from"./module-CWLbpm_7.js";import{R as l,p as g}from"./chunk-NISHYRIK-CKdEls7F.js";import{a as U,b as _,c as $}from"./index-BDUzCKOA.js";class k{static currentConversation=null;static getCurrentConversation(){return this.currentConversation}static setCurrentConversation(t){this.currentConversation=t}static getConversationUrl(t){return this.currentConversation?.conversation_id===t&&this.currentConversation.url?this.currentConversation.url:`/api/conversations/${t}`}static getConversationHeaders(){const t=new b,e=this.currentConversation?.session_api_key;return e&&t.set("X-Session-API-Key",e),t}static async submitFeedback(t,e){const s=`/api/conversations/${t}/submit-feedback`,{data:n}=await r.post(s,e);return n}static async submitConversationFeedback(t,e,s,n){const o="/feedback/conversation",i={conversation_id:t,event_id:s,rating:e,reason:n,metadata:{source:"likert-scale"}},{data:u}=await r.post(o,i);return u}static async checkFeedbackExists(t,e){try{const s=`/feedback/conversation/${t}/${e}`,{data:n}=await r.get(s);return n}catch{return{exists:!1}}}static async getBatchFeedback(t){const e=`/feedback/conversation/${t}/batch`,{data:s}=await r.get(e);return s}static async getWorkspaceZip(t){const e=`${this.getConversationUrl(t)}/zip-directory`;return(await r.get(e,{responseType:"blob",headers:this.getConversationHeaders()})).data}static async getWebHosts(t){const e=`${this.getConversationUrl(t)}/web-hosts`,s=await r.get(e,{headers:this.getConversationHeaders()});return Object.keys(s.data.hosts)}static async getVSCodeUrl(t){const e=`${this.getConversationUrl(t)}/vscode-url`,{data:s}=await r.get(e,{headers:this.getConversationHeaders()});return s}static async getRuntimeId(t){const e=`${this.getConversationUrl(t)}/config`,{data:s}=await r.get(e,{headers:this.getConversationHeaders()});return s}static async getUserConversations(t=20,e){const s=new URLSearchParams;s.append("limit",t.toString()),e&&s.append("page_id",e);const{data:n}=await r.get(`/api/conversations?${s.toString()}`);return n}static async searchConversations(t,e,s=100){const n=new URLSearchParams;n.append("limit",s.toString()),t&&n.append("selected_repository",t),e&&n.append("conversation_trigger",e);const{data:o}=await r.get(`/api/conversations?${n.toString()}`);return o.results}static async deleteUserConversation(t){await r.delete(`/api/conversations/${t}`)}static async createConversation(t,e,s,n,o,i,u){const p={repository:t,git_provider:e,selected_branch:o,initial_user_msg:s,suggested_task:n,conversation_instructions:i,create_microagent:u},{data:c}=await r.post("/api/conversations",p);return c}static async getConversation(t){const{data:e}=await r.get(`/api/conversations/${t}`);return e}static async startConversation(t,e){const{data:s}=await r.post(`/api/conversations/${t}/start`,e?{providers_set:e}:{});return s}static async stopConversation(t){const{data:e}=await r.post(`/api/conversations/${t}/stop`);return e}static async getTrajectory(t){const e=`${this.getConversationUrl(t)}/trajectory`,{data:s}=await r.get(e,{headers:this.getConversationHeaders()});return s}static async getMicroagents(t){const e=`${this.getConversationUrl(t)}/microagents`,{data:s}=await r.get(e,{headers:this.getConversationHeaders()});return s}static async getMicroagentPrompt(t,e){const s=`${this.getConversationUrl(t)}/remember-prompt`,{data:n}=await r.get(s,{params:{event_id:e},headers:this.getConversationHeaders()});return n.prompt}static async updateConversation(t,e){const{data:s}=await r.patch(`/api/conversations/${t}`,e);return s}static async getFiles(t,e){const s=`${this.getConversationUrl(t)}/list-files`,{data:n}=await r.get(s,{params:{path:e},headers:this.getConversationHeaders()});return n}static async getFile(t,e){const s=`${this.getConversationUrl(t)}/select-file`,{data:n}=await r.get(s,{params:{file:e},headers:this.getConversationHeaders()});return n.code}static async uploadFiles(t,e){const s=new FormData;for(const i of e)s.append("files",i);const n=`${this.getConversationUrl(t)}/upload-files`;return(await r.post(n,s,{headers:{"Content-Type":"multipart/form-data",...this.getConversationHeaders()}})).data}}const A=()=>{const a=f();return w({mutationKey:["create-conversation"],mutationFn:async t=>{const{query:e,repository:s,suggestedTask:n,conversationInstructions:o,createMicroagent:i}=t;return k.createConversation(s?.name,s?.gitProvider,e,n,s?.branch,o,i)},onSuccess:async(t,{query:e,repository:s})=>{S.capture("initial_query_submitted",{entry_point:"task_form",query_character_length:e?.length,has_repository:!!s}),await a.invalidateQueries({queryKey:["user","conversations"]})}})},h=a=>{let t;const e=new Set,s=(c,v)=>{const d=typeof c=="function"?c(t):c;if(!Object.is(d,t)){const m=t;t=v??(typeof d!="object"||d===null)?d:Object.assign({},t,d),e.forEach(y=>y(t,m))}},n=()=>t,u={setState:s,getState:n,getInitialState:()=>p,subscribe:c=>(e.add(c),()=>e.delete(c))},p=t=a(s,n,u);return u},H=(a=>a?h(a):h),F=a=>a;function j(a,t=F){const e=l.useSyncExternalStore(a.subscribe,l.useCallback(()=>t(a.getState()),[a,t]),l.useCallback(()=>t(a.getInitialState()),[a,t]));return l.useDebugValue(e),e}const C=a=>{const t=H(a),e=s=>j(t,s);return Object.assign(e,t),e},x=(a=>a?C(a):C),M={optimisticUserMessage:null},E=x((a,t)=>({...M,setOptimisticUserMessage:e=>a(()=>({optimisticUserMessage:e})),getOptimisticUserMessage:()=>t().optimisticUserMessage,removeOptimisticUserMessage:()=>a(()=>({optimisticUserMessage:null}))}));function G({gitProvider:a,className:t}){return g.jsxs(g.Fragment,{children:[a==="github"&&g.jsx(U,{size:14,className:t}),a==="gitlab"&&g.jsx(_,{className:t}),a==="bitbucket"&&g.jsx($,{className:t})]})}export{k as C,G,A as a,x as c,E as u};
